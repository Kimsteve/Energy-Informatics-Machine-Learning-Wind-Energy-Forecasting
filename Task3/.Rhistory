rmse(DataTest$POWER,
knn.reg(train = as.matrix(DataTrain$WS10), test = as.matrix(DataTest$WS10), y = DataTrain$POWER, k = k[i])$pred)
plot(k, results, type = "l")
# k = 1300
rmse(DataTest$POWER,
knn.reg(train = as.matrix(DataTrain$WS10), test = as.matrix(DataTest$WS10), y = DataTrain$POWER, k = 1300)$pred)
plot(POWER ~ WS10, data = DataTest)
points(DataTest$WS10,
knn.reg(train = as.matrix(DataTrain$WS10), test = as.matrix(DataTest$WS10), y = DataTrain$POWER, k = 1300)$pred,
col = "red")
# k = 1300
rmse(DataTest$POWER,
knn.reg(train = as.matrix(DataTrain$WS10), test = as.matrix(DataTest$WS10), y = DataTrain$POWER, k = 1300)$pred)
lmOut2 = lm(POWER ~ WS10sigm, data = DataTrain)
rmse(DataTest$POWER, predict(lmOut2, DataTest))
library(e1071)
SVR <- svm(POWER ~ WS10, data = DataTrain)
rmse(DataTest$POWER, predict(SVR, DataTest))
plot(POWER ~ WS10, data = DataTest)
points(DataTest$WS10, predict(SVR, DataTest), col = "red")
rmse(DataTest$POWER, predict(SVR, DataTest))
library(neuralnet)
temp1 <- sample(1:nrow(Data), 2000)
tempData <- Data[temp1, ]
NN4_2 <- neuralnet(POWER ~ WS10 + alpha, data = tempData, hidden = c(4, 2))
View(tempData)
NN4_2 <- neuralnet(POWER ~ WS10, data = DataTrain, hidden = c(4, 2))
rmse(DataTest$POWER, compute(NN4_2, DataTest$WS10)$net.result)
plot(NN4_2)
View(SolutionData)
lmOut = lm(POWER ~ WS10, data = Data)
summary(lmOut)
rmse(SolutionData$POWER, predict(lmOut, WeatherForecastData))
# k = 1300
knnOut <- knn.reg(train = as.matrix(Data$WS10), test = as.matrix(WeatherForecastData$WS10), y = SolutionData$POWER, k = 1300)
rmse(SolutionData$POWER,
knn.reg(train = as.matrix(Data$WS10), test = as.matrix(WeatherForecastData$WS10), y = SolutionData$POWER, k = 1300)$pred)
rmse(SolutionData$POWER, knnOut$pred)
knnOut
as.matrix(Data$WS10)
as.matrix(WeatherForecastData$WS10)
SolutionData$POWER
# k = 1300
knnOut <- knn.reg(train = as.matrix(Data$WS10), test = as.matrix(WeatherForecastData$WS10), y = SolutionData$POWER, k = 1300)
knnOut
# k = 1300
knnOut <- knn.reg(train = as.matrix(Data$WS10), test = as.matrix(WeatherForecastData$WS10), y = Data$POWER, k = 1300)
rmse(SolutionData$POWER, knnOut$pred)
SVR <- svm(POWER ~ WS10, data = Data)
SVROut=SVR
?svm
eps <- seq(0, 1, by = 0.2)
results <- numeric(length(eps))
for (i in seq_along(k)) {
SVROut <- svm(POWER ~ WS10, data = DataTrain, eps = eps[i])
results[i] <- rmse(DataTest$POWER, predict(SVROut, DataTest))
}
results
eps <- seq(0, 0.4, by = 0.1)
results <- numeric(length(eps))
for (i in seq_along(k)) {
SVROut <- svm(POWER ~ WS10, data = DataTrain, eps = eps[i])
results[i] <- rmse(DataTest$POWER, predict(SVROut, DataTest))
print(results[i])
}
eps
SVROut <- svm(POWER ~ WS10, data = Data, eps = 0.3)
rmse(Solution$POWER, predict(SVROut, WeatherForecastData))
rmse(SolutionData$POWER, predict(SVROut, WeatherForecastData))
NNOut <- neuralnet(POWER ~ WS10, data = Data, hidden = c(4, 2))
rmse(SolutionData$POWER, compute(NNOut, WeatherForecastData$WS10)$net.result)
LmOutPred <- predict(lmOut, WeatherForecastData)
KNNOutPred <- knnOut$pred
SVRPred <- predict(SVROut, WeatherForecastData)
NNPred <- compute(NNOut, WeatherForecastData$WS10)$net.result
rmse(Solution$POWER, LmOutPred)
rmse(SolutionData$POWER, LmOutPred)
rmse(SolutionData$POWER, KNNOutPred)
rmse(SolutionData$POWER, SVRPred)
rmse(SolutionData$POWER, NNPred)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
points(WeatherForecastData$WS10, LmOutPred, col = "red")
lines(WeatherForecastData$WS10, LmOutPred, col = "red")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(WeatherForecastData$WS10, LmOutPred, col = "red")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(WeatherForecastData$WS10, KNNOutPred, col = "blue")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(WeatherForecastData$WS10, SVRPred, col = "brown")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(WeatherForecastData$WS10, NNPred, col = "violet")
lines(sort(WeatherForecastData$WS10), sort(KNNOutPred), col = "blue")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(sort(WeatherForecastData$WS10), sort(KNNOutPred), col = "blue")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(sort(WeatherForecastData$WS10), sort(SVRPred), col = "brown")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(sort(WeatherForecastData$WS10), sort(NNPred), col = "violet")
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
plot(POWER ~ direction, Data)
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # zamiana sekund na dni
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
plot(POWER ~ direction, Data)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR <- lm(POWER ~ WS10 + direction, data = Data)
summary(model.MLR)
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat <- predict(model.MLR, WeatherForecastData)
rmse(SolutionData$POWER, y_hat)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.simple <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.simple)
y_hat.simple <- predict(model.MLR.simple, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.simple)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
abline(model.MLR.simple, col = "red")
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
corData <- as.data.frame(Data)
corData <- corData[,2:9]
cor(corData,method = "pearson")
plotsData <- SolutionData
#plotsData["y_hat1"] <- y_hat.simple
plot(plotsData)
SolutionData$TIMESTAMP <- strptime(SolutionData$TIMESTAMP, "%Y%m%d %H:%M")
SolutionData$TIMESTAMP2 <- as.numeric(SolutionData$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # zamiana sekund na dni
plot(POWER ~ TIMESTAMP, SolutionData)
plot(POWER ~ TIMESTAMP2, SolutionData)
plot(POWER ~ TIMESTAMP2, SolutionData)
lines(SolutionData$TIMESTAMP, y_hat.simple, col="blue" )
lines(SolutionData$TIMESTAMP2, y_hat.simple, col="blue" )
plot(POWER ~ TIMESTAMP2, SolutionData, pch = ".")
lines(SolutionData$TIMESTAMP2, y_hat.simple, col="blue" )
plot(POWER ~ TIMESTAMP2, SolutionData, size = 1)
plot(POWER ~ TIMESTAMP2, SolutionData, type = "line")
lines(SolutionData$TIMESTAMP2, y_hat.simple, col="blue" )
plot(POWER ~ TIMESTAMP2*3600*24 , SolutionData, type = "line")
plot(POWER ~ TIMESTAMP2*3600*24 , SolutionData, type = "line")
SolutionData$TIMESTAMPdays <- SolutionData$TIMESTAMP2*3600*24
plot(POWER ~ TIMESTAMP2, SolutionData, type = "line")
lines(SolutionData$TIMESTAMP2, y_hat.simple, col="blue" )
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
lines(SolutionData$TIMESTAMPdays, y_hat.simple, col="blue" )
SolutionData$TIMESTAMPdays <- SolutionData$TIMESTAMP2*3600*24 - 669
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
lines(SolutionData$TIMESTAMPdays, y_hat.simple, col="blue" )
summary(SolutionData$TIMESTAMPdays )
Data$U10_25 <- Data$U10*cos(25 * pi/180)- Data$V10*sin(25 * pi/180)
Data$V10_25 <- Data$U10*sin(25 * pi/180) + Data$V10*cos(25 * pi/180)
Data$direction2 <- abs(atan2(Data$V10_25, Data$U10_25)*(180/pi))
WeatherForecastData$U10_25 <- WeatherForecastData$U10*cos(25 * pi/180)- WeatherForecastData$V10*sin(25 * pi/180)
WeatherForecastData$V10_25 <- WeatherForecastData$U10*sin(25 * pi/180) + WeatherForecastData$V10*cos(25 * pi/180)
WeatherForecastData$direction2 <- abs(atan2(WeatherForecastData$V10_25, WeatherForecastData$U10_25)*(180/pi))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR.dir2 <- lm(POWER ~ WS10 + direction2, data = Data)
model.MLR.pred <- predict(model.MLR.dir2)
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
length(model.MLR.pred)
model.MLR.pred <- predict(model.MLR.dir2, data = SolutionData)
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
lines(SolutionData$TIMESTAMPdays, y_hat.simple, col="blue" )
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
model.MLR.pred <- predict(model.MLR.dir2, data = WeatherForecastData)
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
lines(SolutionData$TIMESTAMPdays, y_hat.simple, col="blue" )
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
length(model.MLR.pred)
dim(WeatherForecastData)
model.MLR.pred <- predict(model.MLR.dir2, data = WeatherForecastData)
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
model.MLR.pred <- predict(model.MLR.dir2, WeatherForecastData)
length(model.MLR.pred)
lines(SolutionData$TIMESTAMPdays, model.MLR.pred, col = "red")
summary(model.MLR)
rmse(SolutionData$POWER, mean(Data$POWER)) # compare with null model
rmse(SolutionData$POWER, mean(Data$POWER)) # so called "null model"
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task1R")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # zamiana sekund na dni
# liczba dni od 1. daty
set.seed(1)
test <- sample(1:nrow(Data), 2000)
DataTrain <- Data[-test, ]; DataTest <- Data[test, ]
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
rmse(SolutionData$POWER, mean(Data$POWER)) # so called "null model"
#scattplot points
plot(POWER ~ WS10, data = Data)
lmOut = lm(POWER ~ WS10, data = Data)
summary(lmOut)
rmse(SolutionData$POWER, predict(lmOut, WeatherForecastData))
#################################################
#kNN model
################################################
# install.packages("FNN")
library (FNN)
# Look at kNN regression
knnmodel1 <- knn.reg(train = as.matrix(DataTrain$WS10), test = as.matrix(DataTest$WS10), y = DataTrain$POWER, k = 1)
rmse(DataTest$POWER, knnmodel1$pred)
k <- c(1:10, seq(12, 30, by = 2), seq(35, 50, by = 5))
# k = 1400
knnOut <- knn.reg(train = as.matrix(Data$WS10), test = as.matrix(WeatherForecastData$WS10), y = Data$POWER, k = 1400)
rmse(SolutionData$POWER, knnOut$pred)
library(e1071)
eps <- seq(0.1, 0.4, by = 0.1)
results <- numeric(length(eps))
eps <- seq(0.1, 0.4, by = 0.1)
results <- numeric(length(eps))
for (i in seq_along(k)) {
SVROut <- svm(POWER ~ WS10, data = DataTrain, eps = eps[i])
results[i] <- rmse(DataTest$POWER, predict(SVROut, DataTest))
print(results[i])
}
SVROut <- svm(POWER ~ WS10, data = Data, eps = 0.3)
rmse(SolutionData$POWER, predict(SVROut, WeatherForecastData))
rmse(SolutionData$POWER, predict(SVROut, WeatherForecastData))
library(neuralnet)
NN4_2 <- neuralnet(POWER ~ WS10, data = DataTrain, hidden = c(4, 2))
rmse(DataTest$POWER, compute(NN4_2, DataTest$WS10)$net.result)
rmse(DataTest$POWER, compute(NN4_2, DataTest$WS10)$net.result)
NN4_2 <- neuralnet(POWER ~ WS10, data = DataTrain, hidden = c(4, 2))
NNOut <- neuralnet(POWER ~ WS10, data = Data, hidden = c(4, 2))
rmse(SolutionData$POWER, compute(NNOut, WeatherForecastData$WS10)$net.result)
LmOutPred <- predict(lmOut, WeatherForecastData)
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = LmOutPred), "ForecastTemplate1-LR.csv", row.names = FALSE)
KNNOutPred <- knnOut$pred
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = KNNOutPred ), "ForecastTemplate1-kNN.csv", row.names = FALSE)
SVRPred <- predict(SVROut, WeatherForecastData)
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = SVRPred), "ForecastTemplate1-SVR.csv", row.names = FALSE)
NNPred <- compute(NNOut, WeatherForecastData$WS10)$net.result
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = NNPred), "ForecastTemplate1-NN.csv", row.names = FALSE)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(WeatherForecastData$WS10, LmOutPred, col = "red")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(sort(WeatherForecastData$WS10), sort(KNNOutPred), col = "blue")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(sort(WeatherForecastData$WS10), sort(SVRPred), col = "brown")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(sort(WeatherForecastData$WS10), sort(NNPred), col = "violet")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
lines(WeatherForecastData$WS10, LmOutPred, col = "red")
lines(sort(WeatherForecastData$WS10), sort(KNNOutPred), col = "blue")
lines(sort(WeatherForecastData$WS10), sort(SVRPred), col = "brown")
lines(sort(WeatherForecastData$WS10), sort(NNPred), col = "violet")
summary(lmOut)
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # zamiana sekund na dni
SolutionData$TIMESTAMP <- strptime(SolutionData$TIMESTAMP, "%Y%m%d %H:%M")
SolutionData$TIMESTAMP2 <- as.numeric(SolutionData$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # zamiana sekund na dni
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
SolutionData$TIMESTAMP <- strptime(SolutionData$TIMESTAMP, "%Y%m%d %H:%M")
SolutionData$TIMESTAMP2 <- as.numeric(SolutionData$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
plot(POWER ~ direction, Data)
corData <- as.data.frame(Data)
corData <- corData[,2:10]
cor(corData,method = "pearson")
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
SolutionData$TIMESTAMP <- strptime(SolutionData$TIMESTAMP, "%Y%m%d %H:%M")
SolutionData$TIMESTAMP2 <- as.numeric(SolutionData$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
plot(POWER ~ direction, Data)
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
SolutionData$TIMESTAMP <- strptime(SolutionData$TIMESTAMP, "%Y%m%d %H:%M")
SolutionData$TIMESTAMP2 <- as.numeric(SolutionData$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR.wd <- lm(POWER ~ WS10 + direction, data = Data)
summary(model.MLR.wd)
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat <- predict(model.MLR.wd, WeatherForecastData)
rmse(SolutionData$POWER, y_hat)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.w <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.w)
y_hat.simple <- predict(model.MLR.w, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.simple)
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
SolutionData$TIMESTAMPdays <- SolutionData$TIMESTAMP2*3600*24 - 669
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat.wd <- predict(model.MLR.wd, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wd)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat.wd), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.w <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.w)
y_hat.w <- predict(model.MLR.w, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.w)
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
SolutionData$TIMESTAMPdays <- SolutionData$TIMESTAMP2*3600*24 - 669
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
SolutionData$TIMESTAMPdays <- SolutionData$TIMESTAMP2*3600*24 - 669
SolutionData$TIMESTAMPdays <- SolutionData$TIMESTAMP2*3600*24 - 669
plot(POWER ~ TIMESTAMPdays, SolutionData, type = "line")
lines(SolutionData$TIMESTAMPdays, y_hat.w, col="blue" )
lines(SolutionData$TIMESTAMPdays, model.MLR.wd, col = "red")
model.MLR.wd
lines(SolutionData$TIMESTAMPdays, y_hat.wd, col = "red")
#corData <- as.data.frame(Data)[,2:9]
#corData <- corData[,2:9]
#cor(corData,method = "pearson")
cor(as.data.frame(Data)[,2:9])
plot(plotsData$POWER ~plotsData$TIMESTAMP)
ggplot(Data, aes(x = direction, y = POWER)) + geom_point() + geom_smooth()
ggplot(Data, aes(x = direction2, y = WS10)) + geom_point() + geom_smooth()
ggplot(Data, aes(x = direction, y = WS10)) + geom_point() + geom_smooth()
mean(Data$direction2[Data$WS10 > quantile(Data$WS10, 0.75)] < 90)
mean(Data$direction2[Data$WS10 > quantile(Data$WS10, 0.9)] < 90)
Data$direction2
#------------------------------------------------------------------------------------------------------------------
library(ggplot2)
ggplot(Data, aes(x = direction, y = POWER)) + geom_point() + geom_smooth()
ggplot(Data, aes(x = direction2, y = POWER)) + geom_point() + geom_smooth()
ggplot(Data, aes(x = direction, y = POWER)) + geom_point() + geom_smooth()
ggplot(Data, aes(x = direction, y = WS10)) + geom_point() + geom_smooth()
plot(POWER ~ direction, Data)
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
plot(POWER ~ direction, Data)
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
plot(POWER ~ direction, Data)
plot(WS10 ~ direction, Data)
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
SolutionData$TIMESTAMP <- strptime(SolutionData$TIMESTAMP, "%Y%m%d %H:%M")
SolutionData$TIMESTAMP2 <- as.numeric(SolutionData$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days
Data$TIMESTAMP[1]
plot(POWER ~ direction, Data)
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
plot(POWER ~ direction, Data)
plot(POWER ~ direction, WeatherForecastData)
plot(WS10 ~ direction, Data)
#plot(POWER ~ direction, Data)
#plot(WS10 ~ direction, Data)
hist(Data$direction)
plot(POWER ~ direction, Data)
for (i in seq_along(10))
print(i)
for (i in seq_along(10))
print(i)
for (i in seq_along(10))
i
for (i in seq_along(1:10))
print(i)
print(i)
for (i in seq_along(1:4))
print(i)
d1 <- atan2(5,5)*(180/pi)
d2 <- atan2(5,-5)*(180/pi)
d3 <- atan2(-5,-5)*(180/pi)
d4 <- atan2(-5,5)*(180/pi)
d1;d2;d3;d4
atan2(0,5)*(180/pi)
d1;d2;d3;d4
atan2(0,5)*(180/pi)
d1 <- atan2(5,5)*(180/pi)
d2 <- atan2(-5,5)*(180/pi)
d3 <- atan2(-5,-5)*(180/pi)
d4 <- atan2(5,-5)*(180/pi)
d1;d2;d3;d4
atan2(0,-5)*(180/pi)
atan2(-0.01,-5)*(180/pi)
atan2(0,-5)*(180/pi)
atan2(0,-5)*(180/pi)
View(Data)
Data$TIMESTAMP
cor(Data[,c("POWER","V10")])
cor(Data[,c("POWER","V10","U10","direction")])
hist(Data$Data)
#plot(POWER ~ direction, Data)
#plot(WS10 ~ direction, Data)
hist(Data$direction)
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task3")
#read CSV file and prepare data
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])  / 3600 / 24
#read CSV file and prepare data
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # second to days (from 2012-01-01 01:00)
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - Data$TIMESTAMP[1])  / 3600 / 24 # second to days (from 2012-01-01 01:00)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# build a model
model.lm <- lm(POWER ~ TIMESTAMP2, data = Data)
# build a model
model.lm <- lm(POWER ~ TIMESTAMP2, data = Data)
y_hat.lm <- predict(model.lm, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.lm)
rmse(SolutionData$POWER, mean(Data$POWER)) # compare with null model
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMP2)
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMP2 *3600*24 - 669)
WeatherForecastData$TIMESTAMPdays <- WeatherForecastData$TIMESTAMP2 *3600*24 - 669
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMPdays)
# build a model
model.lm <- lm(POWER ~ TIMESTAMP2, data = Data)
y_hat.lm <- predict(model.lm, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.lm)
rmse(SolutionData$POWER, mean(Data$POWER)) # compare with null model
WeatherForecastData$TIMESTAMPdays <- WeatherForecastData$TIMESTAMP2 *3600*24 - 669
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMPdays)
abline(model.lm, col = "red")
summary(model.lm)
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat.lm), "ForecastTemplate3-LR.csv", row.names = FALSE)
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMPdays, type="n")
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMPdays, type="l")
abline(model.lm, col = "red")
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMPdays, type="l")
abline(model.lm, col = "red")
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat.lm), "ForecastTemplate3-LR.csv", row.names = FALSE)
model.lm$coefficients
View(Data)
