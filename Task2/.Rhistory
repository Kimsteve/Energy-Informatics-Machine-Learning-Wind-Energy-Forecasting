library(lpSolve)
installed.packages("lpSolve")
install.packages("lpSolve")
# install.packages("lpSolve")
library(lpSolve)
f.obj <- c(0.1, 0.9, 0.5)
f.obj <- c(0.1, 0.9, 0.5)
c1 <- c(1, 1, 1)
c2 <- c(1, 0, 0)
c3 <- c(0, 1, 0)
c4 <- c(0, 0, 1)
f.con <- matrix(c(c1, c2, c3, c4), nrow = 4, byrow = TRUE)
f.dir <- c("=", "<=", "<=", "<=")
f.rhs <- c(6, 4, 4, 4)
solution <- lp("min", f.obj, f.con, f.dir, f.rhs)
lp("min", f.obj, f.con, f.dir, f.rhs)$solution
# install.packages("lpSolve")
library(lpSolve)
c1 <- c(1, 1, 1)
c2 <- c(1, 0, 0)
c3 <- c(0, 1, 0)
c4 <- c(0, 0, 1)
f.con <- matrix(c(c1, c2, c3, c4), nrow = 4, byrow = TRUE)
f.con
?lp
lp("min", f.obj, f.con, f.dir, f.rhs)$solution
f.obj <- c(0.1, 0.9, 0.5, 0, 0) # brak kary za |x1-x2| i |x2-x3| (p1 = p2 = 0)
f.obj <- c(0.1, 0.9, 0.5, 0.2, 0.2) # mala kara
f.obj <- c(0.1, 0.9, 0.5, 0.5, 0.5) # duza kara
c1 <- c(1, 1, 1, 0, 0)
c2 <- c(1, 0, 0, 0, 0)
c3 <- c(0, 1, 0, 0, 0)
c4 <- c(0, 0, 1, 0, 0)
c5 <- c(1, -1, 0, -1, 0)
c6 <- c(-1, 1, 0, -1, 0)
c7 <- c(0, 1, -1, 0, -1)
c8 <- c(0, -1, 1, 0, -1)
f.con <- matrix(c(c1, c2, c3, c4, c5, c6, c7, c8), nrow = 8, byrow = TRUE)
f.dir <- c("=", "<=", "<=", "<=", "<=", "<=", "<=", "<=")
f.rhs <- c(6, 4, 4, 4, 0, 0, 0, 0)
solution <- lp("min", f.obj, f.con, f.dir, f.rhs)
f.obj <- c(0.1, 0.9, 0.5, 0, 0) # brak kary za |x1-x2| i |x2-x3| (p1 = p2 = 0)
solution <- lp("min", f.obj, f.con, f.dir, f.rhs)
lp("min", f.obj, f.con, f.dir, f.rhs)$solution[1:3]
lp("min", f.obj, f.con, f.dir, f.rhs)$solution
lp("min", f.obj, f.con, f.dir, f.rhs)$solution[1:3]
f.obj <- c(0.1, 0.9, 0.5, 0.2, 0.2) # mala kara
solution <- lp("min", f.obj, f.con, f.dir, f.rhs)
lp("min", f.obj, f.con, f.dir, f.rhs)$solution[1:3]
f.obj <- c(0.1, 0.9, 0.5, 0.5, 0.5) # duza kara
solution <- lp("min", f.obj, f.con, f.dir, f.rhs)
lp("min", f.obj, f.con, f.dir, f.rhs)$solution[1:3]
sqrt(2)*3
sqrt(4) + sqrt(2)
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR <- lm(POWER ~ WS10 + direction, data = Data)
summary(model.MLR)
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat <- predict(model.MLR, WeatherForecastData)
rmse(SolutionData$POWER, y_hat)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.simple <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.simple)
y_hat.simple <- predict(model.MLR.simple, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.simple)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
abline(model.MLR.simple, col = "red")
summary(y_hat.simple)
y_hat.simple
View(Data)
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
cor(Data$POWER,.)
cor(Data$POWER,)
??cor
??cor()
??cor(Data)
cor(Data)
cor(Data$POWER)
cor(Data$POWER,Data)
cor(Data)
cor(Data)
cor(Data,use="pairwise.complete.obs")
corData <- as.data.frame(Data)
cor(corData)
cor(corData)
corData <- as.data.frame(Data)[1:]
corData <- corData[1: ,]
corData <- corData[,1:]
corData <- corData[,1:2]
View(corData)
corData <- corData[,2:9]
View(corData)
corData <- as.data.frame(Data)
corData <- corData[,2:9]
View(corData)
cor(corData)
cor(corData,method = "pearson")
summary(model.MLR)
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR <- lm(POWER ~ WS10 + direction, data = Data)
summary(model.MLR)
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat <- predict(model.MLR, WeatherForecastData)
rmse(SolutionData$POWER, y_hat)
rmse(SolutionData$POWER, y_hat)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.simple <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.simple)
y_hat.simple <- predict(model.MLR.simple, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.simple)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
abline(model.MLR.simple, col = "red")
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
corData.dir <- corData[,c("U10","V10","direction")]
rmse(SolutionData$POWER, y_hat.wvu)
corData <- as.data.frame(Data)
corData <- corData[,2:9]
cor(corData,method = "pearson")
corData.dir <- corData[,c("U10","V10","direction")]
View(corData.dir)
cor(corData.dir,method = "pearson")
abline(model.MLLR, col="blue")
abline(model.MLR, col="blue")
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
abline(model.MLR.simple, col = "red")
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR <- lm(POWER ~ WS10 + direction, data = Data)
summary(model.MLR)
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat <- predict(model.MLR, WeatherForecastData)
rmse(SolutionData$POWER, y_hat)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.simple <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.simple)
y_hat.simple <- predict(model.MLR.simple, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.simple)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
abline(model.MLR.simple, col = "red")
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
corData <- as.data.frame(Data)
corData <- corData[,2:9]
cor(corData,method = "pearson")
View(Data)
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task3")
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task3")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])
View(WeatherForecastData)
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])
View(WeatherForecastData)
View(SolutionData)
View(Data)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
View(WeatherForecastData)
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])
View(WeatherForecastData)
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])  / 3600 / 24
View(WeatherForecastData)
Data$TIMESTAMP <- strptime(Data$TIMESTAMP, "%Y%m%d %H:%M")
Data$TIMESTAMP2 <- as.numeric(Data$TIMESTAMP - Data$TIMESTAMP[1]) / 3600 / 24 # zamiana sekund na dni
View(Data)
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])  / 3600 / 24
model.lm <- lm(POWER ~ TIMESTAMP2, data = Data)
plot(model.lm)
y_hat <- predict(model.lm, WeatherForecastData)
View(WeatherForecastData)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
WeatherForecastData$TIMESTAMP <- strptime(WeatherForecastData$TIMESTAMP, "%Y%m%d %H:%M")
WeatherForecastData$TIMESTAMP2 <- as.numeric(WeatherForecastData$TIMESTAMP - WeatherForecastData$TIMESTAMP[1])  / 3600 / 24
model.lm <- lm(POWER ~ TIMESTAMP2, data = Data)
y_hat <- predict(model.lm, WeatherForecastData)
plot(y_hat ~ WeatherForecastData$TIMESTAMP2)
plot(POWER ~ TIMESTAMP2, data = WeatherForecastData)
View(WeatherForecastData)
plot(SolutionData$POWER ~ WeatherForecastData$TIMESTAMP2)
abline(model.lm, col = "red")
summary(model.lm)
y_hat
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate3-LR.csv", row.names = FALSE)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
rmse(SolutionData$POWER, y_hat)
rmse(SolutionData$POWER, mean(SolutionData$POWER)) # null model
rmse(Data$POWER, mean(Data$POWER)) # null model
rmse(SolutionData$POWER, mean(Data$POWER)) # null model
abline(mean(Data$POWER), col="green")
summary(model.lm)
plot(WeatherForecastData)
View(WeatherForecastData)
plot(WeatherForecastData$TIMESTAMP~ SolutionData$POWER)
plot(SolutionData$TIMESTAMP~ SolutionData$POWER)
plot(SolutionData)
plot(SolutionData$POWER ~ SolutionData$TIMESTAMP)
abline(model.MLR.simple, col = "red")
#set the current working directory
setwd("~/Desktop/WindEnergyForecasting-Assignment2/Task2")
#read CSV file and prepare
Data <- read.csv("TrainData.csv", sep=",", header=TRUE)
WeatherForecastData <- read.csv("WeatherForecastInput.csv")
SolutionData <- read.csv("Solution.csv")
# Calculate the wind direction based on the zonal component and meridional component
Data$direction <- atan2(Data$V10, Data$U10)*(180/pi)
WeatherForecastData$direction <- atan2(WeatherForecastData$V10, WeatherForecastData$U10)*(180/pi)
#function used for calculation RMSE metric.
rmse <- function(y, y_pred) sqrt(mean((y - y_pred)^2))
# Then, you build Multiple Linear Regression (MLR) model between wind power generation and two weather parameters
model.MLR <- lm(POWER ~ WS10 + direction, data = Data)
summary(model.MLR)
# Predict the wind power production for the whole month 11.2013
# based on the MLR model and weather forecasting data in the file WeatherForecastInput.csv
y_hat <- predict(model.MLR, WeatherForecastData)
rmse(SolutionData$POWER, y_hat)
# Predicted wind power production is saved in the file ForecastTemplate2.csv
write.csv(data.frame(TIMESTAMP = WeatherForecastData$TIMESTAMP, FORECAST = y_hat), "ForecastTemplate2.csv", row.names = FALSE)
# Compare the prediction accuracy with the linear regression where only wind speed is considered.
model.MLR.simple <- lm(POWER ~ WS10, data = Data)
summary(model.MLR.simple)
y_hat.simple <- predict(model.MLR.simple, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.simple)
plot(SolutionData$POWER ~ WeatherForecastData$WS10)
abline(model.MLR.simple, col = "red")
# Additionally, model directly based on the zonal and meridional component has been made.
model.MLR.wvu <- lm(POWER ~ WS10 + V10 + U10, data = Data)
summary(model.MLR.wvu)
y_hat.wvu <- predict(model.MLR.wvu, WeatherForecastData)
rmse(SolutionData$POWER, y_hat.wvu)
corData <- as.data.frame(Data)
corData <- corData[,2:9]
cor(corData,method = "pearson")
plot(SolutionData$POWER ~ SolutionData$TIMESTAMP)
abline(model.MLR.simple, col = "red")
plot(SolutionData$POWER ~ SolutionData$TIMESTAMP)
abline(y_hat.simple, col = "red")
forcast.simple <- WeatherForecastData$TIMESTAMP
forcast.simple <- as.data.frame(WeatherForecastData$TIMESTAMP)
View(forcast.simple)
forcast.simple["y_hat"] <- y_hat.simple
abline(forcast.simple, col = "red")
plot(SolutionData$POWER ~ SolutionData$TIMESTAMP)
forcast.simple <- as.data.frame(WeatherForecastData$TIMESTAMP)
forcast.simple["y_hat"] <- y_hat.simple
abline(forcast.simple, col = "red")
View(SolutionData)
plotsData <- SolutionData
View(plotsData)
plotsData["y_hat"] <- y_hat.simple
View(plotsData)
plot(plotsData)
plot(plotsData$POWER ~plotsData$TIMESTAMP)
abline(plotsData$y_hat, col = "red")
abline(plotsData$y_hat ~plotsData$TIMESTAMP, col = "red")
plot(plotsData$y_hat ~plotsData$TIMESTAMP)
plot(plotsData$POWER ~plotsData$TIMESTAMP)
abline(plotsData$y_hat ~plotsData$TIMESTAMP, col = "red")
plot(plotsData$POWER ~plotsData$TIMESTAMP)
plotsData <- SolutionData
plotsData["y_hat1"] <- y_hat.simple
plot(plotsData$POWER ~plotsData$TIMESTAMP)
abline(plotsData$y_hat ~plotsData$TIMESTAMP, col = "red")
plot(plotsData$y_hat ~plotsData$TIMESTAMP)
